 This section explains notation that is not in Principia Mathematica. Except for some notation for “relative” types in Volume II, there are famously no symbols for types in Principia Mathematica! Sentences are generally to be taken as “typically ambiguous” and so standing for expressions of a whole range of types and so just as there are no individual or predicate constants, there are no particular functions of any specific type. So not only does one not see how to symbolize the argument: All men are mortal  Socrates is a man  Therefore, Socrates is mortal but also there is no indication of the logical type of the function “\(\hat{x}\) is mortal”. The project of PM is to reduce mathematics to logic, and part of the view of logic behind this project is that logical truths are all completely general. The derivation of truths of mathematics from definitions and truths of logic will thus not involve any particular constants other than those introduced by definition from purely logical notion. As a result no notation is included in PM for describing those types. Those of us who wish to consider PM as a logic which can be applied, must supplement it with some indication of types. Readers should note that the explanation of types outlined below is not going to correspond with the statements about types in the text of PM. Alonzo Church [1976] developed a simple, rational reconstruction of the notation for both the simple and ramified theory of types as implied by the text of PM. (There are alternative, equivalent notations for the theory of types.) The full theory can be seen as a development of the simple theory of types. A definition of the simple types can be given as follows: Here are some intuitive ways to understand the definition of type. Suppose that “Socrates” names an individual. (We are here ignoring Russell’s considered opinion that such ordinary individuals are in fact classes of classes of sense data, and so of a much higher type.) Then the individual constant “Socrates” would be of type \(\iota\). A monadic propositional function which takes individuals as arguments is of type \((\iota)\). Suppose that “is mortal” is a predicate expressing such a function. The function “\(\hat{x}\) is mortal” will also be of type \((\iota)\). A two-place or binary relation between individuals is of type \((\iota,\iota)\). Thus, a relation expression like “parent of” and the function “\(\hat{x}\) is a parent of \(\hat{z}\)” will be of type \((\iota,\iota)\). Propositional functions of type \((\iota)\) are often called “first order”; hence the name “first order logic” for the familiar logic where the variables only range over arguments of first order functions. A monadic function of arguments of type \(\tau\) are of type \((\tau)\) and so functions of such functions are of type \(((\tau))\). “Second order logic” will have variables for the arguments of such functions (as well as variables for individuals). Binary relations between functions of type \(\tau\) are of type \((\tau,\tau)\), and so on, for relations of having more than 2 arguments. Mixed types are defined by the above. A relation between an individual and a proposition (such as “\(\hat{x}\) believes that \(\hat{P}\)”) will be of type \((\iota\),( )). To construct a notation for the full ramified theory of types of PM, another piece of information must be encoded in the symbols. Church calls the resulting system one of r-types. The key idea of ramified types is that any function defined using quantification over functions of some given type has to be of a higher “order” than those functions. To use Russell’s example: \(\hat{x}\) has all the qualities that great generals have is a function true of persons (i.e., individuals), and from the point of view of simple type theory, it has the same simple logical type as particular qualities of individuals (such as bravery and decisiveness). However, in ramified type theory, the above function will be of a higher order than those particular qualities of individuals, since unlike those particular qualities, it involves a quantification over those qualities. So, whereas the expression “\(\hat{x}\) is brave” denotes a function of r-type \((\iota)/1\), the expression “\(\hat{x}\) has all the qualities that great generals have” will have r-type \((\iota)/2\). In these r-types, the number after the “/” indicates the level of the function. The order of the functions will be defined and computed given the following definitions. Church defines the r-types as follows: The order of an entity is defined as follows (here we no longer follow Church, for he defines orders for variables, i.e., expressions, instead of orders for the things the variables range over): These two definitions are supplemented with a principle which identifies the levels of particular defined functions, namely, that the level of a defined function should be one higher than the highest order entity having a name or variable that appears in the definition of that function. To see how these definitions and principles can be used to compute the order of the function “\(\hat{x}\) has all the qualities that great generals have”, note that the function can be represented as follows, where “\(x, y\)” are variables ranging over individuals of r-type \(\iota\) (order 0), “GreatGeneral\((y)\)” is a predicate denoting a propositional function of r-type \((\iota)/1\) (and so of order 1), and “\(\phi\)” is a variable ranging over propositional functions of r-type \((\iota)/1\) (and so of order 1) such as great general, bravery, leadership, skill, foresight, etc.: We first note that given the above principle, the r-type of this function is \((\iota)/2\); the level is 2 because the level of the r-type of this function has to be one higher than the highest order of any entity named (or in the range of a variable used) in the definition. In this case, the denotation of GreatGeneral, and the range of the variable “\(\phi\)”, is of order 1, and no other expression names or ranges over an entity of higher order. Thus, the level of the function named above is defined to be 2. Finally, we compute the order of the function denoted above as it was defined: the sum of the level plus the greatest of the orders of the arguments of the above function. Since the only arguments in the above function are individuals (of order 0), the order of our function is just 2. Quantifying over functions of r-type \((\tau)/n\) of order \(k\) in a definition of a new function yields a function of r-type \((\tau)/n+1\), and so a function of order one higher, \(k+1\). Two kinds of functions, then, can be of the second order: (1) functions of first-order functions of individuals, of r-type \(((\iota)/1)/1\), and (2) functions of r-type \((\iota)/2\), such as our example “\(\hat{x}\) has all the qualities that great generals have”. This latter will be a function true of individuals such as Napoleon, but of a higher order than simple functions such as “\(\hat{x}\) is brave”, which are of r-type \((\iota)/1\). Logicians today use a different notion of “order”. Today, first-order logic is a logic with only variables for individuals. Second order logic is a logic with variables for both individuals and properties of individuals. Third-order logic is a logic with variables for individuals, properties of individuals, and properties of properties of individuals. And so forth. By contrast, Church would call these logics, respectively, the logic of functions of the types \((\iota)/1\) and \((\iota,\ldots,\iota)/1\), the logic of functions of the types \(((\iota)/1)/1\) and \(((\iota,\ldots,\iota)/1,\ldots,(\iota,\ldots,\iota)/1)/1\), and the logic of functions of the types \((((\iota)/1)/1)/1\) etc. (i.e., the level-one functions of the functions of the preceding type). Given Church’s definitions, these are logics of first-, second- and third-order functions, respectively, thus coinciding with the modern terminology of “\(n\)th-order logic”.