 Now that we have a whole hierarchy of propositional functions, we should find some work for them to do. One theory in which propositional functions do good work is Montague semantics, developed in the late 1960s by Richard Montague. In order to understand Montague's method we need to understand lambda abstraction. For the formula A(x) we read the expression λx[A(x)] as a predicate expression. It extension (in a given possible world) is the set of things that satisfy the formula A(x). Lambda abstractors are governed by two rules, known as α-conversion and β-reduction: (α-con) A(a) (a formula with a free for x) can be replaced by λx[A(x)]a. (β-red) λx[A(x)]a can be replaced by A(a) (where x is free for a in A(x)). Because of the equivalence between a formula A(x) and λx[A(x)]a, one might wonder why add lambda abstractors to our language. In Montague semantics, the answer has to do with the very direct way that he translates expressions of natural languages into his logical language. We will discuss that soon, but first let us learn a bit about Montague's intensional logic. Montague adds two other pieces of notation to his language: ∧ and  ∨. The expression ∧λx[Fx] represents a function from worlds to sets of individuals. Given a possible world w, ∧λx[Fx] represents a function that takes w to the extension of λx[Fx]. The operator ∨ takes expressions of the form ∧λx[Fx] ‘down’ to their extensions at the world in which the expression is being evaluated. For example, the extension of ∨∧λx[Fx] at w is just the same as the extension of λx[Fx] at w. What is so special about Montague semantics is that it can be used in a very direct way as a semantics for large fragments of natural languages. Consider the following sentence: Zermela barks. The meaning of this sentence is understood in Montague semantics as a structure of the meanings of its constituent expressions. Montague represents the meanings of expressions using translation rules. Here we use the following translation rules: Zermela translates into λP[(∨P)z] barks translates into ∧B Now we can construct a formula that gives the meaning of ‘Zermela barks’: λP[(∨P)z]∧B Notice that in constructing the sentence we place the expressions in the same order in which they occur in English. The use of lambda abstracts allows us to reverse the order of two expressions from the way in which they would appear in ordinary statements of a formal logical language (that does not have lambdas). Now we can use β-reduction to obtain: (∨∧B)z And now we apply Montague's rule to eliminate ∨∧: Bz In this process we start with an expression that has the same order of expressions as the original English sentence and then reduce it to a very standard formula of logic. This tells us that the truth condition of the sentence ‘Zermela barks’ is the set of worlds that is the proposition expressed by Bz. Of course we knew that independently of Montague's work, but the point is that the Montague reduction shows us how we can connect the surface grammar of English sentences to the formula of our logical language. The formula of standard logic, moreover, displays its truth-conditions in a very perspicuous way. So, the Montague reduction shows us the connection between sentences of natural languages to their truth conditions.