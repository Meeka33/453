 In the 1980s, connectionism emerged as a prominent rival to classical computationalism. Connectionists draw inspiration from neurophysiology rather than logic and computer science. They employ computational models, neural networks, that differ significantly from Turing-style models. A neural network is a collection of interconnected nodes. Nodes fall into three categories: input nodes, output nodes, and hidden nodes (which mediate between input and output nodes). Nodes have activation values, given by real numbers. One node can bear a weighted connection to another node, also given by a real number. Activations of input nodes are determined exogenously: these are the inputs to computation.  Total input activation of a hidden or output node is a weighted sum of the activations of nodes feeding into it. Activation of a hidden or output node is a function of its total input activation; the particular function varies with the network. During neural network computation, waves of activation propagate from input nodes to output nodes, as determined by weighted connections between nodes. In a feedforward network, weighted connections flow only in one direction. Recurrent networks have feedback loops, in which connections emanating from hidden units circle back to hidden units. Recurrent networks are less mathematically tractable than feedforward networks. However, they figure crucially in psychological modeling of various phenomena, such as phenomena that involve some kind of memory (Elman 1990). Weights in a neural network are typically mutable, evolving in accord with a learning algorithm. The literature offers various learning algorithms, but the basic idea is usually to adjust weights so that actual outputs gradually move closer to the target outputs one would expect for the relevant inputs. The backpropagation algorithm is a widely used algorithm of this kind (Rumelhart, Hinton, and Williams 1986). Connectionism traces back to McCulloch and Pitts (1943), who studied networks of interconnected logic gates (e.g., AND-gates and OR-gates). One can view a network of logic gates as a neural network, with activations confined to two values (0 and 1) and activation functions given by the usual truth-functions. McCulloch and Pitts advanced logic gates as idealized models of individual neurons. Their discussion exerted a profound influence on computer science (von Neumann 1945). Modern digital computers are simply networks of logic gates. Within cognitive science, however, researchers usually focus upon networks whose elements are more “neuron-like” than logic gates. In particular, modern-day connectionists typically emphasize analog neural networks whose nodes take continuous rather than discrete activation values. Some authors even use the phrase “neural network” so that it exclusively denotes such networks. Neural networks received relatively scant attention from cognitive scientists during the 1960s and 1970s, when Turing-style models dominated. The 1980s witnessed a huge resurgence of interest in neural networks, especially analog neural networks, with the two-volume Parallel Distributed Processing (Rumelhart, McClelland, and the PDP research group, 1986; McClelland, Rumelhart, and the PDP research group, 1987) serving as a manifesto.  Researchers constructed connectionist models of diverse phenomena: object recognition, speech perception, sentence comprehension, cognitive development, and so on. Impressed by connectionism, many researchers concluded that CCTM+RTM was no longer “the only game in town”. In the 2010s, a class of computational models known as deep neural networks became quite popular (Krizhevsky, Sutskever, and Hinton 2012; LeCun, Bengio, and Hinton 2015). These models are neural networks with multiple layers of hidden nodes (sometimes hundreds of such layers). Deep neural networks—trained on large data sets through one or another learning algorithm (usually backpropagation)—have achieved great success in many areas of AI, including object recognition and strategic game-playing. Deep neural networks are now widely deployed in commercial applications, and they are the focus of extensive ongoing investigation within both academia and industry. Researchers have also begun using them to model the mind (e.g. Marblestone, Wayne, and Kording 2016; Kriegeskorte 2015). For a detailed overview of neural networks, see Haykin (2008). For a user-friendly introduction, with an emphasis on psychological applications, see Marcus (2001). For a philosophically oriented introduction to deep neural networks, see Buckner (2019). Neural networks have a very different “feel” than classical (i.e., Turing-style) models. Yet classical computation and neural network computation are not mutually exclusive: Although some researchers suggest a fundamental opposition between classical computation and neural network computation, it seems more accurate to identify two modeling traditions that overlap in certain cases but not others (cf. Boden 1991; Piccinini 2008b). In this connection, it is also worth noting that classical computationalism and connectionist computationalism have their common origin in the work of McCulloch and Pitts. Philosophers often say that classical computation involves “rule-governed symbol manipulation” while neural network computation is non-symbolic. The intuitive picture is that “information” in neural networks is globally distributed across the weights and activations, rather than concentrated in localized symbols. However, the notion of “symbol” itself requires explication, so it is often unclear what theorists mean by describing computation as symbolic versus non-symbolic. As mentioned in §1, the Turing formalism places very few conditions on “symbols”. Regarding primitive symbols, Turing assumes just that there are finitely many of them and that they can be inscribed in read/write memory locations. Neural networks can also manipulate symbols satisfying these two conditions: as just noted, one can implement a Turing-style model in a neural network. Many discussions of the symbolic/non-symbolic dichotomy employ a more robust notion of “symbol”. On the more robust approach, a symbol is the sort of thing that represents a subject matter. Thus, something is a symbol only if it has semantic or representational properties. If we employ this more robust notion of symbol, then the symbolic/non-symbolic distinction cross-cuts the distinction between Turing-style computation and neural network computation. A Turing machine need not employ symbols in the more robust sense. As far as the Turing formalism goes, symbols manipulated during Turing computation need not have representational properties (Chalmers 2011). Conversely, a neural network can manipulate symbols with representational properties. Indeed, an analog neural network can manipulate symbols that have a combinatorial syntax and semantics (Horgan and Tienson 1996; Marcus 2001). Following Steven Pinker and Alan Prince (1988), we may distinguish between eliminative connectionism and implementationist connectionism. Eliminative connectionists advance connectionism as a rival to classical computationalism. They argue that the Turing formalism is irrelevant to psychological explanation. Often, though not always, they seek to revive the associationist tradition in psychology, a tradition that CCTM had forcefully challenged. Often, though not always, they attack the mentalist, nativist linguistics pioneered by Noam Chomsky (1965). Often, though not always, they manifest overt hostility to the very notion of mental representation. But the defining feature of eliminative connectionism is that it uses neural networks as replacements for Turing-style models. Eliminative connectionists view the mind as a computing system of a radically different kind than the Turing machine. A few authors explicitly espouse eliminative connectionism (Churchland 1989; Rumelhart and McClelland 1986; Horgan and Tienson 1996), and many others incline towards it. Implementationist connectionism is a more ecumenical position. It allows a potentially valuable role for both Turing-style models and neural networks, operating harmoniously at different levels of description (Marcus 2001; Smolensky 1988). A Turing-style model is higher-level, whereas a neural network model is lower-level.  The neural network illuminates how the brain implements the Turing-style model, just as a description in terms of logic gates illuminates how a personal computer executes a program in a high-level programming language. Connectionism excites many researchers because of the analogy between neural networks and the brain. Nodes resemble neurons, while connections between nodes resemble synapses. Connectionist modeling therefore seems more “biologically plausible” than classical modeling. A connectionist model of a psychological phenomenon apparently captures (in an idealized way) how interconnected neurons might generate the phenomenon. When evaluating the argument from biological plausibility, one should recognize that neural networks vary widely in how closely they match actual brain activity. Many networks that figure prominently in connectionist writings are not so biologically plausible (Bechtel and Abrahamsen 2002: 341–343; Bermúdez 2010: 237–239; Clark 2014: 87–89; Harnish 2002: 359–362). A few examples: On the other hand, some neural networks are more biologically realistic (Buckner and Garson 2019; Illing, Gerstner, and Brea 2019). For instance, there are neural networks that replace backpropagation with more realistic learning algorithms, such as a reinforcement learning algorithm (Pozzi, Bohté, and Roelfsema 2019, Other Internet Resources) or an unsupervised learning algorithm (Krotov and Hopfield 2019). There are also neural networks whose nodes output discrete spikes roughly akin to those emitted by real neurons in the brain (Maass 1996; Buesing, Bill, Nessler, and Maass 2011). Even when a neural network is not biologically plausible, it may still be more biologically plausible than classical models. Neural networks certainly seem closer than Turing-style models, in both details and spirit, to neurophysiological description. Many cognitive scientists worry that CCTM reflects a misguided attempt at imposing the architecture of digital computers onto the brain. Some doubt that the brain implements anything resembling digital computation, i.e., computation over discrete configurations of digits (Piccinini and Bahar 2013). Others doubt that brains display clean Turing-style separation between central processor and read/write memory (Dayan 2009). Neural networks fare better on both scores: they do not require computation over discrete configurations of digits, and they do not postulate a clean separation between central processor and read/write memory. Classical computationalists typically reply that it is premature to draw firm conclusions based upon biological plausibility, given how little we understand about the relation between neural, computational, and cognitive levels of description (Gallistel and King 2009; Marcus 2001). Using measurement techniques such as cell recordings and functional magnetic resonance imaging (fMRI), and drawing upon disciplines as diverse as physics, biology, AI, information theory, statistics, graph theory, and dynamical systems theory, neuroscientists have accumulated substantial knowledge about the brain at varying levels of granularity (Zednik 2019). We now know quite a lot about individual neurons, about how neurons interact within neural populations, about the localization of mental activity in cortical regions (e.g. the visual cortex), and about interactions among cortical regions. Yet we still have a tremendous amount to learn about how neural tissue accomplishes the tasks that it surely accomplishes: perception, reasoning, decision-making, language acquisition, and so on. Given our present state of relative ignorance, it would be rash to insist that the brain does not implement anything resembling Turing computation. Connectionists offer numerous further arguments that we should employ connectionist models instead of, or in addition to, classical models.  See the entry connectionism for an overview. For purposes of this entry, we mention two additional arguments. The first argument emphasizes learning (Bechtel and Abrahamsen 2002: 51). A vast range of cognitive phenomena involve learning from experience. Many connectionist models are explicitly designed to model learning, through backpropagation or some other algorithm that modifies the weights between nodes. By contrast, connectionists often complain that there are no good classical models of learning. Classical computationalists can respond by citing perceived defects of connectionist learning algorithms (e.g., the heavy reliance of backpropagation upon supervised training). Classical computationalists can also cite Bayesian decision theory, which models learning as probabilistic updating. More specifically, classical computationalists can cite the achievements of Bayesian cognitive science, which uses Bayesian decision theory to construct mathematical models of mental activity (Ma 2019). Over the past few decades, Bayesian cognitive science has accrued many explanatory successes. This impressive track record suggests that some mental processes are Bayesian or approximately Bayesian (Rescorla 2020). Moreover, the advances mentioned in §2 show how classical computing systems can execute or at least approximately execute Bayesian updating in various realistic scenarios. These developments provide hope that classical computation can model many important cases of learning. The second argument emphasizes speed of computation. Neurons are much slower than silicon-based components of digital computers. For this reason, neurons could not execute serial computation quickly enough to match rapid human performance in perception, linguistic comprehension, decision-making, etc. Connectionists maintain that the only viable solution is to replace serial computation with a “massively parallel” computational architecture—precisely what neural networks provide (Feldman and Ballard 1982; Rumelhart 1989). However, this argument is only effective against classical computationalists who insist upon serial processing. As noted in §3, some Turing-style models involve parallel processing. Many classical computationalists are happy to allow “massively parallel” mental computation, and the argument gains no traction against these researchers. That being said, the argument highlights an important question that any computationalist—whether classical, connectionist, or otherwise—must address: How does a brain built from relatively slow neurons execute sophisticated computations so quickly? Neither classical nor connectionist computationalists have answered this question satisfactorily (Gallistel and King 2009: 174 and 265). Fodor and Pylyshyn (1988) offer a widely discussed critique of eliminativist connectionism. They argue that systematicity and productivity fail in connectionist models, except when the connectionist model implements a classical model. Hence, connectionism does not furnish a viable alternative to CCTM. At best, it supplies a low-level description that helps bridge the gap between Turing-style computation and neuroscientific description. This argument has elicited numerous replies and counter-replies. Some argue that neural networks can exhibit systematicity without implementing anything like classical computational architecture (Horgan and Tienson 1996; Chalmers 1990; Smolensky 1991; van Gelder 1990). Some argue that Fodor and Pylyshyn vastly exaggerate systematicity (Johnson 2004) or productivity (Rumelhart and McClelland 1986), especially for non-human animals (Dennett 1991).  These issues, and many others raised by Fodor and Pylyshyn’s argument, have been thoroughly investigated in the literature.  For further discussion, see Bechtel and Abrahamsen (2002: 156–199), Bermúdez (2005: 244–278), Chalmers (1993), Clark (2014: 84–86), and the encyclopedia entries on  the language of thought hypothesis  and on   connectionism. Gallistel and King (2009) advance a related but distinct productivity argument. They emphasize productivity of mental computation, as opposed to productivity of mental states. Through detailed empirical case studies, they argue that many non-human animals can extract, store, and retrieve detailed records of the surrounding environment. For example, the Western scrub jay records where it cached food, what kind of food it cached in each location, when it cached the food, and whether it has depleted a given cache (Clayton, Emery, and Dickinson 2006). The jay can access these records and exploit them in diverse computations: computing whether a food item stored in some cache is likely to have decayed; computing a route from one location to another; and so on. The number of possible computations a jay can execute is, for all practical purposes, infinite. CCTM explains the productivity of mental computation by positing a central processor that stores and retrieves symbols in addressable read/write memory. When needed, the central processor can retrieve arbitrary, unpredicted combinations of symbols from memory. In contrast, Gallistel and King argue, connectionism has difficulty accommodating the productivity of mental computation. Although Gallistel and King do not carefully distinguish between eliminativist and implementationist connectionism, we may summarize their argument as follows: Gallistel and King conclude that CCTM is much better suited than either eliminativist or implementationist connectionism to explain a vast range of cognitive phenomena. Critics attack this new productivity argument from various angles, focusing mainly on the empirical case studies adduced by Gallistel and King. Peter Dayan (2009), John Donahoe (2010), and Christopher Mole (2014) argue that biologically plausible neural network models can accommodate at least some of the case studies. Dayan and Donahoe argue that empirically adequate neural network models can dispense with anything resembling read/write memory. Mole argues that, in certain cases, empirically adequate neural network models can implement the read/write memory mechanisms posited by Gallistel and King. Debate on these fundamental issues seems poised to continue well into the future. Computational neuroscience describes the nervous system through computational models. Although this research program is grounded in mathematical modeling of individual neurons, the distinctive focus of computational neuroscience is systems of interconnected neurons. Computational neuroscience usually models these systems as neural networks. In that sense, it is a variant, off-shoot, or descendant of connectionism. However, most computational neuroscientists do not self-identify as connectionists. There are several differences between connectionism and computational neuroscience: One might say that computational neuroscience is concerned mainly with neural computation (computation by systems of neurons), whereas connectionism is concerned mainly with abstract computational models inspired by neural computation. But the boundaries between connectionism and computational neuroscience are admittedly somewhat porous. For an overview of computational neuroscience, see Trappenberg (2010) or Miller (2018). Serious philosophical engagement with neuroscience dates back at least to Patricia Churchland’s Neurophilosophy (1986). As computational neuroscience matured, Churchland became one of its main philosophical champions (Churchland, Koch, and Sejnowski 1990; Churchland and Sejnowski 1992). She was joined by Paul Churchland (1995, 2007) and others (Eliasmith 2013; Eliasmith and Anderson 2003; Piccinini and Bahar 2013; Piccinini and Shagrir 2014). All these authors hold that theorizing about mental computation should begin with the brain, not with Turing machines or other inappropriate tools drawn from logic and computer science. They also hold that neural network modeling should strive for greater biological realism than connectionist models typically attain. Chris Eliasmith (2013) develops this neurocomputational viewpoint through the Neural Engineering Framework, which supplements computational neuroscience with tools drawn from control theory (Brogan 1990). He aims to “reverse engineer” the brain, building large-scale, biologically plausible neural network models of cognitive phenomena. Computational neuroscience differs in a crucial respect from CCTM and connectionism: it abandons multiply realizability. Computational neuroscientists cite specific neurophysiological properties and processes, so their models do not apply equally well to (say) a sufficiently different silicon-based creature. Thus, computational neuroscience sacrifices a key feature that originally attracted philosophers to CTM. Computational neuroscientists will respond that this sacrifice is worth the resultant insight into neurophysiological underpinnings. But many computationalists worry that, by focusing too much on neural underpinnings, we risk losing sight of the cognitive forest for the neuronal trees. Neurophysiological details are important, but don’t we also need an additional abstract level of computational description that prescinds from such details? Gallistel and King (2009) argue that a myopic fixation upon what we currently know about the brain has led computational neuroscience to shortchange core cognitive phenomena such as navigation, spatial and temporal learning, and so on. Similarly, Edelman (2014) complains that the Neural Engineering Framework substitutes a blizzard of neurophysiological details for satisfying psychological explanations. Partly in response to such worries, some researchers propose an integrated cognitive computational neuroscience that connects psychological theories with neural implementation mechanisms (Naselaris et al. 2018; Kriegeskorte and Douglas 2018). The basic idea is to use neural network models to illuminate how mental processes are instantiated in the brain, thereby grounding multiply realizable cognitive description in the neurophysiological. A good example is recent work on neural implementation of Bayesian inference (e.g., Pouget et al. 2013; Orhan and Ma 2017; Aitchison and Lengyel 2016). Researchers articulate (multiply realizable) Bayesian models of various mental processes; they construct biologically plausible neural networks that execute or approximately execute the posited Bayesian computations; and they evaluate how well these neural network models fit with neurophysiological data. Despite the differences between connectionism and computational neuroscience, these two movements raise many similar issues. In particular, the dialectic from §4.4 regarding systematicity and productivity arises in similar form.