 Categorial grammars were first constructed in the 1930s by Kazamir Ajdukiewicz (1890–1963), and developed by Yehoshua Bar Hillel (1915–1975) and Joachim Lambek (1922–) in the 1950s an 1960s. Categorial grammars are logical tools for representing the syntax of languages. In categorial grammar, the syntax of languages is represented using a different sort of generalization of the functional notation than in Montague semantics. In Montague Semantics, the lambda abstractor is used to move the meaning of an expression to the location that the expression occupies in a sentence. In categorial grammar, predicates and many other sorts of expressions are taken to be functions of sorts. But there is a distinction in categorial grammar between two sorts of application of a function to its arguments. Let's see how this works. Let's start with the primitive types CN (common noun) and NP (noun phrase). The indefinite article ‘a’ takes a common noun (on its right) and returns a NP. So it has the type NP/CN. The common noun ‘dog’, of course, has the type CN. We write ‘A has the type T’ as ‘A⊢T’. So we have, a ⊢ NP/CN and dog ⊢ CN In order to put these two sequents together, we can use a form of the rule modus ponens which says that from a sequent X ⊢ A/B and a sequent Y ⊢ B, we can derive the sequent X.Y ⊢ A. We can use this rule to derive: a.dog ⊢ NP Moreover, an intransitive verb has the type NP\S, where S is the type of sentences. The backslash in NP\S means that the expression takes an argument of type NP on the left side and returns an expression of type S. The verb ‘barks’ is intransitive, that is, barks ⊢ NP\S The version of modus ponens that we use with the backslash is slightly different. It tells us that from X ⊢ A\B and Y ⊢ A we can derive Y.X ⊢ B. So we now can obtain, (a.dog).barks ⊢ S This says that ‘a dog barks’ is a sentence. The logics used to describe grammars in this way are substructural logics. What is of interest to us here is that in categorial grammars determiners such as ‘a’ and verbs are thought of as functions, but they can differ from one another in terms of whether they take arguments on their right or on their left. In the set theoretic concept of function as a set of ordered pairs, functions are thought of just in terms of their correlating arguments with values. A function, as it is understood in categorial grammar has more structure than this. This is an interesting generalization of the notion of a function as it is used in logic. We can see that it also has important links to the concept of a propositional function, especially as it is used in Montague semantics. In categorial grammar we can attribute more than one type to a single expression in a language. Let us call this the principle of multiple types. Here is an example due to Mark Steadman. Consider the sentence I dislike, and Mary enjoys musicals. The transitive verbs ‘dislike’ and ‘enjoys’ have the type (NP\S)/NP, that is, they take a noun phrase on their right and return a verb phrase. But in the case of ‘I dislike, and Mary enjoys musicals’ the verbs are separated from their object and joined to their objects. Steadman deals with this by raising the type of the subjects ‘I’ and ‘Mary’. Usually, we treat these words as having the type NP, but here they have the type S/(NP\S). This is the type of an expression that takes a verb phrase on its right and returns a sentence. Steadman then uses a rule that makes the backslash transitive and derives that ‘I.dislike’ has the type S/NP, which takes a noun phrase (such as ‘musicals’) on its right an returns a sentence. We can see that the principle of multiple types also holds if analyze sentences other type theories, such as the simple theory of types. For consider the sentence Mary eats a hamburger. In interpreting this sentence we can take ‘Mary’ to be of type i, but we can also take it to be of type <<i>>, that is, the type of a propositional function on propositional functions of individuals. We can also raise the type of ‘eats a hamburger’ to <<<i>>>, a propositional function on propositional functions on propositional functions on individuals. And so on. The principle of multiple types and the principle of multiple analyses together show that a single expression or sentence can be interpreted as having a very large number of logical forms.